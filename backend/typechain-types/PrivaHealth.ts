/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface PrivaHealthInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addPatientRecord"
      | "authorizeDoctor"
      | "authorizedHealthCenters"
      | "getPatientRecord"
      | "getSensitivePatientData"
      | "patientAddresses"
      | "patients"
      | "revokeDoctor"
      | "setDataSharing"
      | "setHealthCenterAuthorization"
      | "updatePatientRecord"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PatientRecordAdded" | "PatientRecordUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addPatientRecord",
    values: [
      BigNumberish,
      string,
      BigNumberish,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeDoctor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedHealthCenters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPatientRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSensitivePatientData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "patientAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "patients",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDoctor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDataSharing",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setHealthCenterAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePatientRecord",
    values: [BigNumberish, string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addPatientRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedHealthCenters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPatientRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSensitivePatientData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "patientAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "patients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeDoctor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDataSharing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHealthCenterAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePatientRecord",
    data: BytesLike
  ): Result;
}

export namespace PatientRecordAddedEvent {
  export type InputTuple = [patientId: BigNumberish, name: string];
  export type OutputTuple = [patientId: bigint, name: string];
  export interface OutputObject {
    patientId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PatientRecordUpdatedEvent {
  export type InputTuple = [patientId: BigNumberish, name: string];
  export type OutputTuple = [patientId: bigint, name: string];
  export interface OutputObject {
    patientId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivaHealth extends BaseContract {
  connect(runner?: ContractRunner | null): PrivaHealth;
  waitForDeployment(): Promise<this>;

  interface: PrivaHealthInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addPatientRecord: TypedContractMethod<
    [
      _patientId: BigNumberish,
      _name: string,
      _dateOfBirth: BigNumberish,
      _gender: string,
      _contactInfoHash: string,
      _emergencyContactHash: string,
      _medicalRecordHash: string,
      _currentMedications: string,
      _allergies: string,
      _bloodType: string
    ],
    [void],
    "nonpayable"
  >;

  authorizeDoctor: TypedContractMethod<
    [_doctorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedHealthCenters: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getPatientRecord: TypedContractMethod<
    [_patientId: BigNumberish],
    [
      [string, bigint, string, string, bigint, boolean] & {
        name: string;
        dateOfBirth: bigint;
        gender: string;
        bloodType: string;
        lastUpdated: bigint;
        dataSharing: boolean;
      }
    ],
    "view"
  >;

  getSensitivePatientData: TypedContractMethod<
    [_patientId: BigNumberish],
    [
      [string, string, string] & {
        medicalRecordHash: string;
        currentMedications: string;
        allergies: string;
      }
    ],
    "view"
  >;

  patientAddresses: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  patients: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        patientId: bigint;
        name: string;
        dateOfBirth: bigint;
        gender: string;
        contactInfoHash: string;
        emergencyContactHash: string;
        medicalRecordHash: string;
        currentMedications: string;
        allergies: string;
        bloodType: string;
        lastUpdated: bigint;
        dataSharing: boolean;
      }
    ],
    "view"
  >;

  revokeDoctor: TypedContractMethod<
    [_doctorAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setDataSharing: TypedContractMethod<
    [_allowSharing: boolean],
    [void],
    "nonpayable"
  >;

  setHealthCenterAuthorization: TypedContractMethod<
    [_healthCenter: AddressLike, _isAuthorized: boolean],
    [void],
    "nonpayable"
  >;

  updatePatientRecord: TypedContractMethod<
    [
      _patientId: BigNumberish,
      _medicalRecordHash: string,
      _currentMedications: string,
      _allergies: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addPatientRecord"
  ): TypedContractMethod<
    [
      _patientId: BigNumberish,
      _name: string,
      _dateOfBirth: BigNumberish,
      _gender: string,
      _contactInfoHash: string,
      _emergencyContactHash: string,
      _medicalRecordHash: string,
      _currentMedications: string,
      _allergies: string,
      _bloodType: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizeDoctor"
  ): TypedContractMethod<[_doctorAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedHealthCenters"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getPatientRecord"
  ): TypedContractMethod<
    [_patientId: BigNumberish],
    [
      [string, bigint, string, string, bigint, boolean] & {
        name: string;
        dateOfBirth: bigint;
        gender: string;
        bloodType: string;
        lastUpdated: bigint;
        dataSharing: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSensitivePatientData"
  ): TypedContractMethod<
    [_patientId: BigNumberish],
    [
      [string, string, string] & {
        medicalRecordHash: string;
        currentMedications: string;
        allergies: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "patientAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "patients"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        patientId: bigint;
        name: string;
        dateOfBirth: bigint;
        gender: string;
        contactInfoHash: string;
        emergencyContactHash: string;
        medicalRecordHash: string;
        currentMedications: string;
        allergies: string;
        bloodType: string;
        lastUpdated: bigint;
        dataSharing: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "revokeDoctor"
  ): TypedContractMethod<[_doctorAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDataSharing"
  ): TypedContractMethod<[_allowSharing: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHealthCenterAuthorization"
  ): TypedContractMethod<
    [_healthCenter: AddressLike, _isAuthorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePatientRecord"
  ): TypedContractMethod<
    [
      _patientId: BigNumberish,
      _medicalRecordHash: string,
      _currentMedications: string,
      _allergies: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PatientRecordAdded"
  ): TypedContractEvent<
    PatientRecordAddedEvent.InputTuple,
    PatientRecordAddedEvent.OutputTuple,
    PatientRecordAddedEvent.OutputObject
  >;
  getEvent(
    key: "PatientRecordUpdated"
  ): TypedContractEvent<
    PatientRecordUpdatedEvent.InputTuple,
    PatientRecordUpdatedEvent.OutputTuple,
    PatientRecordUpdatedEvent.OutputObject
  >;

  filters: {
    "PatientRecordAdded(uint256,string)": TypedContractEvent<
      PatientRecordAddedEvent.InputTuple,
      PatientRecordAddedEvent.OutputTuple,
      PatientRecordAddedEvent.OutputObject
    >;
    PatientRecordAdded: TypedContractEvent<
      PatientRecordAddedEvent.InputTuple,
      PatientRecordAddedEvent.OutputTuple,
      PatientRecordAddedEvent.OutputObject
    >;

    "PatientRecordUpdated(uint256,string)": TypedContractEvent<
      PatientRecordUpdatedEvent.InputTuple,
      PatientRecordUpdatedEvent.OutputTuple,
      PatientRecordUpdatedEvent.OutputObject
    >;
    PatientRecordUpdated: TypedContractEvent<
      PatientRecordUpdatedEvent.InputTuple,
      PatientRecordUpdatedEvent.OutputTuple,
      PatientRecordUpdatedEvent.OutputObject
    >;
  };
}
